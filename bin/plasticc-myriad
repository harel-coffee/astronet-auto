#!/bin/bash -l
# Copyright 2021
# Author: Tarek Allam Jr.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Batch script to run a serial job under SGE.
# https://www.rc.ucl.ac.uk/docs/Job_Results/#qsub-emailing
#$ -m base

# Request a number of GPU cards, in this case 2 (the maximum)
#$ -l gpu=1

# Request ten minutes of wallclock time (format hours:minutes:seconds).
#$ -l h_rt=47:10:0

# Request 1 gigabyte of RAM (must be an integer followed by M, G, or T)
#$ -l mem=80G

# Request 15 gigabyte of TMPDIR space (default is 10 GB - remove if cluster is diskless)
#$ -l tmpfs=15G

## #$ -o logs/$JOB_ID.log

# Combine stdout with stderr
#$ -j yes

# Set the name of the job.
#$ -N plasticc-GPU

# Set the working directory to somewhere in your scratch space.
#  This is a necessary step as compute nodes cannot write to $HOME.
# Replace "<your_UCL_id>" with your UCL user ID.
#$ -wd /home/zcicg57/Scratch/workspace

# Your work should be done in $TMPDIR
cd $TMPDIR

# load the cuda module (in case you are running a CUDA program)
module unload compilers mpi
module load compilers/gnu/4.9.2
module load python3/recommended
module load cuda/8.0.61-patch2/gnu-4.9.2
module load cudnn/6.0/cuda-8.0
module load tensorflow/2.0.0/gpu-py37

# Run the application
SECONDS=0 # https://stackoverflow.com/a/8903280/4521950
source /scratch/scratch/zcicg57/astronet/conf/astronet.conf

# Print the contents of this file to stdout from line 15 onwards
awk 'NR>15' $ASNWD/bin/plasticc-myriad
date
which python
export PYTHONHASHSEED=0
# Test Imports
# python -c "import astronet as asn; print(asn.__version__)"
python -c "import tensorflow as tf; print(tf.__version__)"
# Architecture
## Current options: {t2, snx}
ARCH=$1
echo "Using $ARCH architecture"

dataset="plasticc"
# Hyperparameter Optimisation
# python $ASNWD/astronet/$ARCH/opt/hypertrain.py --dataset $dataset --epochs 50 -z "" -A ""
# Train
# python $ASNWD/astronet/$ARCH/train.py --dataset $dataset --epochs 400 -z "" -t "" --model "1613517996-0a72904"
date
duration=$SECONDS
echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."

# Preferably, tar-up (archive) all output files onto the shared scratch area
tar -zcvf $HOME/Scratch/files_from_job_$JOB_ID.tar.gz $TMPDIR
# Make sure you have given enough time for the copy to complete!
# Make sure you have given enough time for the copy to complete!
#SBATCH --job-name=avZptest             # Job name
#SBATCH --time=48:00:00                 # Time limit hrs:min:sec
#SBATCH --output=logs/%j.log            # Standard output and error log
# #SBATCH --exclusive                     # Request exclusive access to a node
#SBATCH --cpus-per-task=24              # Number of CPUs per node
# Add a -e or --error with an error file name to separate output and error
# logs. Note this will ignore the --output option if used afterwards
## #SBATCH -e logs/%j.err
## #SBATCH -o logs/%j.out

