Timer unit: 1e-06 s

Total time: 6.33806 s
File: load_run_lpa.py
Function: get_model at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def get_model(
    26                                               model_name: str = "model-GR-noZ-23057-1642540624-0.1.dev963+g309c9d8-LL0.968",
    27                                           ):
    28                                               # Load pre-trained original t2 model
    29         1          0.0      0.0      0.0      model_path = f"{asnwd}/astronet/t2/models/plasticc/{model_name}"
    30
    31         2    6338058.0 3169029.0    100.0      model = tf.keras.models.load_model(
    32         1          0.0      0.0      0.0          model_path,
    33         1          4.0      4.0      0.0          custom_objects={"WeightedLogLoss": WeightedLogLoss()},
    34         1          0.0      0.0      0.0          compile=False,
    35                                               )
    36
    37         1          1.0      1.0      0.0      return model

Total time: 6.11331 s
File: load_run_lpa.py
Function: get_compressed_model at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           @profile
    41                                           def get_compressed_model(
    42                                               model_name: str = "model-GR-noZ-23057-1642540624-0.1.dev963+g309c9d8-LL0.968",
    43                                           ):
    44                                               # Load pre-trained zipped original t2 model
    45         1          1.0      1.0      0.0      model_path = f"{asnwd}/astronet/t2/models/plasticc/{model_name}"
    46
    47         1        148.0    148.0      0.0      with tempfile.TemporaryDirectory() as tmpdir:
    48         1       1450.0   1450.0      0.0          with zipfile.ZipFile(f"{model_path}.zip", mode="r") as archive:
    49         6         16.0      2.7      0.0              for file in archive.namelist():
    50         5       3717.0    743.4      0.1                  archive.extract(file, tmpdir)
    51
    52         2    6107967.0 3053983.5     99.9          model = tf.keras.models.load_model(
    53         1          0.0      0.0      0.0              f"{tmpdir}/{model_name}",
    54         1          9.0      9.0      0.0              custom_objects={"WeightedLogLoss": WeightedLogLoss()},
    55         1          0.0      0.0      0.0              compile=False,
    56                                                   )
    57
    58         1          2.0      2.0      0.0      return model

Total time: 0 s
File: load_run_lpa.py
Function: get_compressed_convert_to_lite at line 61

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    61                                           @profile
    62                                           def get_compressed_convert_to_lite(
    63                                               model_name: str = "model-GR-noZ-23057-1642540624-0.1.dev963+g309c9d8-LL0.968",
    64                                           ):
    65                                               # Load pre-trained model
    66                                               model_path = f"{asnwd}/astronet/t2/models/plasticc/{model_name}"
    67
    68                                               with tempfile.TemporaryDirectory() as tmpdir:
    69                                                   with zipfile.ZipFile(f"{model_path}.zip", mode="r") as archive:
    70                                                       for file in archive.namelist():
    71                                                           archive.extract(file, tmpdir)
    72
    73                                                   lmodel = get_tflite_from_saved_model(f"{tmpdir}/{model_name}")
    74
    75                                               return lmodel

Total time: 5.81143 s
File: load_run_lpa.py
Function: get_clustered_model at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                           @profile
    79                                           def get_clustered_model(
    80                                               model_name: str = "model-GR-noZ-28341-1654269564-0.5.1.dev73+g70f85f8-LL0.836",
    81                                           ):
    82                                               # Load pre-trained original t2 model
    83         1          0.0      0.0      0.0      model_path = f"{asnwd}/astronet/tinho/models/plasticc/{model_name}"
    84
    85         2    5811420.0 2905710.0    100.0      model = tf.keras.models.load_model(
    86         1          0.0      0.0      0.0          model_path,
    87         1         13.0     13.0      0.0          custom_objects={"WeightedLogLoss": WeightedLogLoss()},
    88         1          0.0      0.0      0.0          compile=False,
    89                                               )
    90
    91         1          2.0      2.0      0.0      return model

Total time: 5.61733 s
File: load_run_lpa.py
Function: get_compressed_clustered_model at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                           @profile
    95                                           def get_compressed_clustered_model(
    96                                               model_name: str = "model-GR-noZ-28341-1654269564-0.5.1.dev73+g70f85f8-LL0.836",
    97                                           ):
    98                                               # Load pre-trained model
    99         1          0.0      0.0      0.0      model_path = f"{asnwd}/astronet/tinho/models/plasticc/{model_name}"
   100
   101         1        186.0    186.0      0.0      with tempfile.TemporaryDirectory() as tmpdir:
   102         1       1371.0   1371.0      0.0          with zipfile.ZipFile(f"{model_path}.zip", mode="r") as archive:
   103         7         13.0      1.9      0.0              for file in archive.namelist():
   104         6       4294.0    715.7      0.1                  archive.extract(file, tmpdir)
   105
   106         2    5611457.0 2805728.5     99.9          model = tf.keras.models.load_model(
   107         1          0.0      0.0      0.0              f"{tmpdir}/{model_name}",
   108         1          8.0      8.0      0.0              custom_objects={"WeightedLogLoss": WeightedLogLoss()},
   109         1          0.0      0.0      0.0              compile=False,
   110                                                   )
   111
   112         1          1.0      1.0      0.0      return model

Total time: 0.003736 s
File: load_run_lpa.py
Function: get_tflite_from_file at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def get_tflite_from_file(model_path: str):
   117         2       3736.0   1868.0    100.0      return LiteModel.from_file(model_path=model_path)

Total time: 0 s
File: load_run_lpa.py
Function: get_tflite_from_saved_model at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @profile
   121                                           def get_tflite_from_saved_model(model_path: str):
   122                                               return LiteModel.from_saved_model(model_path=model_path)

Total time: 348.939 s
File: load_run_lpa.py
Function: predict_original_model at line 135

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   135                                           @profile
   136                                           def predict_original_model(X_test, wloss):
   137                                               # ORIGINAL T2 MODEL ON GR-noZ
   138                                               # BASELINE
   139         1    6338073.0 6338073.0      1.8      model = get_model()
   140         1  342502341.0 342502341.0     98.2      y_preds = model.predict(X_test)
   141         1      98215.0  98215.0      0.0      print(f"ORIGINAL T2 MODEL ON GR-noZ LL-Test: {wloss(y_test, y_preds).numpy():.2f}")

Total time: 338.245 s
File: load_run_lpa.py
Function: predict_compressed_model at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                           @profile
   145                                           def predict_compressed_model(X_test, wloss):
   146                                               # COMPRESSED MODEL, aka COMPRESSED T2
   147                                               # BASELINE + HUFFMAN
   148         1    6113330.0 6113330.0      1.8      cmodel = get_compressed_model()
   149         1  332044907.0 332044907.0     98.2      y_preds = cmodel.predict(X_test)
   150         2          6.0      3.0      0.0      print(
   151         1      87033.0  87033.0      0.0          f"COMPRESSED MODEL, aka COMPRESSED T2 LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   152                                               )

Total time: 392.768 s
File: load_run_lpa.py
Function: predict_clustered_model at line 155

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   155                                           @profile
   156                                           def predict_clustered_model(X_test, wloss):
   157                                               # CLUSTERED-STRIPPED MODEL, aka TINHO
   158                                               # CLUSTERING
   159         1    5811453.0 5811453.0      1.5      cmodel = get_clustered_model()
   160         1  386875816.0 386875816.0     98.5      y_preds = cmodel.predict(X_test)
   161         2          6.0      3.0      0.0      print(
   162         1      80311.0  80311.0      0.0          f"CLUSTERED-STRIPPED MODEL, aka TINHO LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   163                                               )

Total time: 392.061 s
File: load_run_lpa.py
Function: predict_compressed_clustered_model at line 166

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   166                                           @profile
   167                                           def predict_compressed_clustered_model(X_test, wloss):
   168                                               # COMPRESSED CLUSTERED-STRIPPED MODEL, aka COMPRESSED TINHO
   169                                               # CLUSTERING + HUFFMAN
   170         1    5617356.0 5617356.0      1.4      cmodel = get_compressed_clustered_model()
   171         1  386360119.0 386360119.0     98.5      y_preds = cmodel.predict(X_test)
   172         2          5.0      2.5      0.0      print(
   173         1      83619.0  83619.0      0.0          f"COMPRESSED CLUSTERED-STRIPPED MODEL, aka COMPRESSED TINHO LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   174                                               )

Total time: 0 s
File: load_run_lpa.py
Function: predict_pruned_model at line 177

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   177                                           @profile
   178                                           def predict_pruned_model(X_test, wloss):
   179                                               # PRUNED-STRIPPED MODEL
   180                                               # PRUNING
   181                                               # TODO: Update model_name
   182                                               model_name = ""
   183                                               pmodel = get_pruned_model(model_name)
   184                                               y_preds = pmodel.predict(X_test)
   185                                               print(f"PRUNED-STRIPPED MODEL, LL-Test: {wloss(y_test, y_preds).numpy():.2f}")

Total time: 0 s
File: load_run_lpa.py
Function: predict_compressed_clustered_pruned_model at line 188

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   188                                           @profile
   189                                           def predict_compressed_clustered_pruned_model(X_test, wloss):
   190                                               # COMPRESSED CLUSTERED-PRUNED-STRIPPED MODEL, aka COMPRESSED TINHO
   191                                               # CLUSTERING + PRUNING + HUFFMAN
   192                                               # TODO: Update model_name
   193                                               model_name = ""
   194                                               ccpmodel = get_compressed_clustered_pruned_model(model_name)
   195                                               y_preds = ccpmodel.predict(X_test)
   196                                               print(
   197                                                   f"COMPRESSED CLUSTERED-PRUNED-STRIPPED MODEL, LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   198                                               )

Total time: 0 s
File: load_run_lpa.py
Function: predict_clustered_tflite_model at line 201

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   201                                           @profile
   202                                           def predict_clustered_tflite_model(X_test, wloss):
   203                                               # CLUSTERED-STRIPPED MODEL (TINHO), TFLITE INTERPRETER
   204                                               # CLUSTERING-FLATBUFFER CONVERSION
   205                                               model_path = f"{asnwd}/astronet/t2/models/plasticc/{model_name}"
   206                                               lmodel = get_tflite_from_saved_model(model_path)
   207                                               y_preds = lmodel.predict(X_test)
   208                                               print(
   209                                                   f"TFLITE CLUSTERED-STRIPPED MODEL LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   210                                               )

Total time: 0 s
File: load_run_lpa.py
Function: predict_compressed_clustered_tflite_model at line 213

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   213                                           @profile
   214                                           def predict_compressed_clustered_tflite_model(X_test, wloss):
   215                                               # COMPRESSED CLUSTERED-STRIPPED MODEL (TINHO), TFLITE INTERPRETER
   216                                               # CLUSTERING-FLATBUFFER + HUFFMAN
   217                                               # TODO: Update model_name
   218                                               model_name = "tinho/compressed_clustered_stripped_fink_model"
   219                                               clmodel = get_compressed_lite_model(model_name)
   220                                               y_preds = clmodel.predict(X_test)
   221                                               print(
   222                                                   f"TFLITE COMPRESSED CLUSTERED-STRIPPED MODEL LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   223                                               )

Total time: 320.085 s
File: load_run_lpa.py
Function: predict_saved_clustered_tflite_model at line 226

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   226                                           @profile
   227                                           def predict_saved_clustered_tflite_model(X_test, wloss):
   228                                               # SAVED TFLITE CLUSTERED-STRIPPED MODEL, .tflife FILE
   229                                               # CLUSTERING-FLATBUFFER
   230                                               # Load clustered model TFLite model, i.e. a .tflife model/file on disk
   231         1          1.0      1.0      0.0      model_path = f"{asnwd}/astronet/tinho/models/plasticc/model-GR-noZ-28341-1654269564-0.5.1.dev73+g70f85f8-LL0.836.tflite"
   232         1       1875.0   1875.0      0.0      clmodel = get_tflite_from_file(model_path)
   233         1  320009191.0 320009191.0    100.0      y_preds = clmodel.predict(X_test)
   234         2          6.0      3.0      0.0      print(
   235         1      74330.0  74330.0      0.0          f"SAVED TFLITE COMPRESSED CLUSTERED-STRIPPED MODEL LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   236                                               )

Total time: 314.8 s
File: load_run_lpa.py
Function: predict_saved_clustered_quantized_tflite_model at line 239

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   239                                           @profile
   240                                           def predict_saved_clustered_quantized_tflite_model(X_test, wloss):
   241                                               # SAVED QUANTIZED TFLITE CLUSTERED-STRIPPED MODEL, .tflife FILE
   242                                               # CLUSTERING-FLATBUFFER + QUANTIZATION
   243                                               # Load clustered model TFLite model, i.e. a .tflife model/file on disk
   244                                               # model_path = f"{asnwd}/sbin/lnprof/clustered_stripped_fink_model_quantized.tflite"
   245         1          1.0      1.0      0.0      model_path = f"{asnwd}/astronet/tinho/models/plasticc/quantized-model-GR-noZ-28341-1654269564-0.5.1.dev73+g70f85f8-LL0.836.tflite"
   246         1       1868.0   1868.0      0.0      clmodel = get_tflite_from_file(model_path)
   247         1  314724875.0 314724875.0    100.0      y_preds = clmodel.predict(X_test)
   248         2          5.0      2.5      0.0      print(
   249         1      73447.0  73447.0      0.0          f"SAVED QUANTIZED TFLITE COMPRESSED CLUSTERED-STRIPPED MODEL LL-Test: {wloss(y_test, y_preds).numpy():.2f}"
   250                                               )

